// Generated by view binder compiler. Do not edit!
package com.example.kofico.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.kofico.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HolderItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView allImage;

  @NonNull
  public final TextView allJudul;

  @NonNull
  public final TextView allPrice;

  @NonNull
  public final TextView allRating;

  @NonNull
  public final LinearLayout mainlayout;

  @NonNull
  public final ImageView rating;

  private HolderItemBinding(@NonNull CardView rootView, @NonNull ImageView allImage,
      @NonNull TextView allJudul, @NonNull TextView allPrice, @NonNull TextView allRating,
      @NonNull LinearLayout mainlayout, @NonNull ImageView rating) {
    this.rootView = rootView;
    this.allImage = allImage;
    this.allJudul = allJudul;
    this.allPrice = allPrice;
    this.allRating = allRating;
    this.mainlayout = mainlayout;
    this.rating = rating;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static HolderItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HolderItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.holder_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HolderItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.all_image;
      ImageView allImage = ViewBindings.findChildViewById(rootView, id);
      if (allImage == null) {
        break missingId;
      }

      id = R.id.all_judul;
      TextView allJudul = ViewBindings.findChildViewById(rootView, id);
      if (allJudul == null) {
        break missingId;
      }

      id = R.id.all_price;
      TextView allPrice = ViewBindings.findChildViewById(rootView, id);
      if (allPrice == null) {
        break missingId;
      }

      id = R.id.all_rating;
      TextView allRating = ViewBindings.findChildViewById(rootView, id);
      if (allRating == null) {
        break missingId;
      }

      id = R.id.mainlayout;
      LinearLayout mainlayout = ViewBindings.findChildViewById(rootView, id);
      if (mainlayout == null) {
        break missingId;
      }

      id = R.id.rating;
      ImageView rating = ViewBindings.findChildViewById(rootView, id);
      if (rating == null) {
        break missingId;
      }

      return new HolderItemBinding((CardView) rootView, allImage, allJudul, allPrice, allRating,
          mainlayout, rating);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
